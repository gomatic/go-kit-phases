// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package moody

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SelfClient is the client API for Self service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SelfClient interface {
	Create(ctx context.Context, in *Feeling, opts ...grpc.CallOption) (*Overall, error)
	Retrieve(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Feeling, error)
	Update(ctx context.Context, in *Feeling, opts ...grpc.CallOption) (*Overall, error)
	Delete(ctx context.Context, in *Feeling, opts ...grpc.CallOption) (*Feeling, error)
	List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Complicated, error)
}

type selfClient struct {
	cc grpc.ClientConnInterface
}

func NewSelfClient(cc grpc.ClientConnInterface) SelfClient {
	return &selfClient{cc}
}

func (c *selfClient) Create(ctx context.Context, in *Feeling, opts ...grpc.CallOption) (*Overall, error) {
	out := new(Overall)
	err := c.cc.Invoke(ctx, "/moody.Self/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selfClient) Retrieve(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Feeling, error) {
	out := new(Feeling)
	err := c.cc.Invoke(ctx, "/moody.Self/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selfClient) Update(ctx context.Context, in *Feeling, opts ...grpc.CallOption) (*Overall, error) {
	out := new(Overall)
	err := c.cc.Invoke(ctx, "/moody.Self/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selfClient) Delete(ctx context.Context, in *Feeling, opts ...grpc.CallOption) (*Feeling, error) {
	out := new(Feeling)
	err := c.cc.Invoke(ctx, "/moody.Self/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *selfClient) List(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Complicated, error) {
	out := new(Complicated)
	err := c.cc.Invoke(ctx, "/moody.Self/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelfServer is the server API for Self service.
// All implementations must embed UnimplementedSelfServer
// for forward compatibility
type SelfServer interface {
	Create(context.Context, *Feeling) (*Overall, error)
	Retrieve(context.Context, *Query) (*Feeling, error)
	Update(context.Context, *Feeling) (*Overall, error)
	Delete(context.Context, *Feeling) (*Feeling, error)
	List(context.Context, *Query) (*Complicated, error)
	mustEmbedUnimplementedSelfServer()
}

// UnimplementedSelfServer must be embedded to have forward compatible implementations.
type UnimplementedSelfServer struct {
}

func (UnimplementedSelfServer) Create(context.Context, *Feeling) (*Overall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSelfServer) Retrieve(context.Context, *Query) (*Feeling, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedSelfServer) Update(context.Context, *Feeling) (*Overall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSelfServer) Delete(context.Context, *Feeling) (*Feeling, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSelfServer) List(context.Context, *Query) (*Complicated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSelfServer) mustEmbedUnimplementedSelfServer() {}

// UnsafeSelfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelfServer will
// result in compilation errors.
type UnsafeSelfServer interface {
	mustEmbedUnimplementedSelfServer()
}

func RegisterSelfServer(s grpc.ServiceRegistrar, srv SelfServer) {
	s.RegisterService(&_Self_serviceDesc, srv)
}

func _Self_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feeling)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelfServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moody.Self/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelfServer).Create(ctx, req.(*Feeling))
	}
	return interceptor(ctx, in, info, handler)
}

func _Self_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelfServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moody.Self/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelfServer).Retrieve(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Self_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feeling)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelfServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moody.Self/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelfServer).Update(ctx, req.(*Feeling))
	}
	return interceptor(ctx, in, info, handler)
}

func _Self_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feeling)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelfServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moody.Self/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelfServer).Delete(ctx, req.(*Feeling))
	}
	return interceptor(ctx, in, info, handler)
}

func _Self_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelfServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moody.Self/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelfServer).List(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _Self_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moody.Self",
	HandlerType: (*SelfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Self_Create_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Self_Retrieve_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Self_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Self_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Self_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "self.proto",
}
